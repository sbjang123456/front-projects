"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/git-url-parse";
exports.ids = ["vendor-chunks/git-url-parse"];
exports.modules = {

/***/ "../../.yarn/cache/git-url-parse-npm-13.1.1-006f638d7d-8a6111814f.zip/node_modules/git-url-parse/lib/index.js":
/*!********************************************************************************************************************!*\
  !*** ../../.yarn/cache/git-url-parse-npm-13.1.1-006f638d7d-8a6111814f.zip/node_modules/git-url-parse/lib/index.js ***!
  \********************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar gitUp = __webpack_require__(/*! git-up */ \"../../.yarn/cache/git-up-npm-7.0.0-5e37fa590f-2faadbab51.zip/node_modules/git-up/lib/index.js\");\n\n/**\n * gitUrlParse\n * Parses a Git url.\n *\n * @name gitUrlParse\n * @function\n * @param {String} url The Git url to parse.\n * @return {GitUrl} The `GitUrl` object containing:\n *\n *  - `protocols` (Array): An array with the url protocols (usually it has one element).\n *  - `port` (null|Number): The domain port.\n *  - `resource` (String): The url domain (including subdomains).\n *  - `user` (String): The authentication user (usually for ssh urls).\n *  - `pathname` (String): The url pathname.\n *  - `hash` (String): The url hash.\n *  - `search` (String): The url querystring value.\n *  - `href` (String): The input url.\n *  - `protocol` (String): The git url protocol.\n *  - `token` (String): The oauth token (could appear in the https urls).\n *  - `source` (String): The Git provider (e.g. `\"github.com\"`).\n *  - `owner` (String): The repository owner.\n *  - `name` (String): The repository name.\n *  - `ref` (String): The repository ref (e.g., \"master\" or \"dev\").\n *  - `filepath` (String): A filepath relative to the repository root.\n *  - `filepathtype` (String): The type of filepath in the url (\"blob\" or \"tree\").\n *  - `full_name` (String): The owner and name values in the `owner/name` format.\n *  - `toString` (Function): A function to stringify the parsed url into another url type.\n *  - `organization` (String): The organization the owner belongs to. This is CloudForge specific.\n *  - `git_suffix` (Boolean): Whether to add the `.git` suffix or not.\n *\n */\nfunction gitUrlParse(url) {\n\n    if (typeof url !== \"string\") {\n        throw new Error(\"The url must be a string.\");\n    }\n\n    var shorthandRe = /^([a-z\\d-]{1,39})\\/([-\\.\\w]{1,100})$/i;\n\n    if (shorthandRe.test(url)) {\n        url = \"https://github.com/\" + url;\n    }\n\n    var urlInfo = gitUp(url),\n        sourceParts = urlInfo.resource.split(\".\"),\n        splits = null;\n\n    urlInfo.toString = function (type) {\n        return gitUrlParse.stringify(this, type);\n    };\n\n    urlInfo.source = sourceParts.length > 2 ? sourceParts.slice(1 - sourceParts.length).join(\".\") : urlInfo.source = urlInfo.resource;\n\n    // Note: Some hosting services (e.g. Visual Studio Team Services) allow whitespace characters\n    // in the repository and owner names so we decode the URL pieces to get the correct result\n    urlInfo.git_suffix = /\\.git$/.test(urlInfo.pathname);\n    urlInfo.name = decodeURIComponent((urlInfo.pathname || urlInfo.href).replace(/(^\\/)|(\\/$)/g, '').replace(/\\.git$/, \"\"));\n    urlInfo.owner = decodeURIComponent(urlInfo.user);\n\n    switch (urlInfo.source) {\n        case \"git.cloudforge.com\":\n            urlInfo.owner = urlInfo.user;\n            urlInfo.organization = sourceParts[0];\n            urlInfo.source = \"cloudforge.com\";\n            break;\n        case \"visualstudio.com\":\n            // Handle VSTS SSH URLs\n            if (urlInfo.resource === 'vs-ssh.visualstudio.com') {\n                splits = urlInfo.name.split(\"/\");\n                if (splits.length === 4) {\n                    urlInfo.organization = splits[1];\n                    urlInfo.owner = splits[2];\n                    urlInfo.name = splits[3];\n                    urlInfo.full_name = splits[2] + '/' + splits[3];\n                }\n                break;\n            } else {\n                splits = urlInfo.name.split(\"/\");\n                if (splits.length === 2) {\n                    urlInfo.owner = splits[1];\n                    urlInfo.name = splits[1];\n                    urlInfo.full_name = '_git/' + urlInfo.name;\n                } else if (splits.length === 3) {\n                    urlInfo.name = splits[2];\n                    if (splits[0] === 'DefaultCollection') {\n                        urlInfo.owner = splits[2];\n                        urlInfo.organization = splits[0];\n                        urlInfo.full_name = urlInfo.organization + '/_git/' + urlInfo.name;\n                    } else {\n                        urlInfo.owner = splits[0];\n                        urlInfo.full_name = urlInfo.owner + '/_git/' + urlInfo.name;\n                    }\n                } else if (splits.length === 4) {\n                    urlInfo.organization = splits[0];\n                    urlInfo.owner = splits[1];\n                    urlInfo.name = splits[3];\n                    urlInfo.full_name = urlInfo.organization + '/' + urlInfo.owner + '/_git/' + urlInfo.name;\n                }\n                break;\n            }\n\n        // Azure DevOps (formerly Visual Studio Team Services)\n        case \"dev.azure.com\":\n        case \"azure.com\":\n            if (urlInfo.resource === 'ssh.dev.azure.com') {\n                splits = urlInfo.name.split(\"/\");\n                if (splits.length === 4) {\n                    urlInfo.organization = splits[1];\n                    urlInfo.owner = splits[2];\n                    urlInfo.name = splits[3];\n                }\n                break;\n            } else {\n                splits = urlInfo.name.split(\"/\");\n                if (splits.length === 5) {\n                    urlInfo.organization = splits[0];\n                    urlInfo.owner = splits[1];\n                    urlInfo.name = splits[4];\n                    urlInfo.full_name = '_git/' + urlInfo.name;\n                } else if (splits.length === 3) {\n                    urlInfo.name = splits[2];\n                    if (splits[0] === 'DefaultCollection') {\n                        urlInfo.owner = splits[2];\n                        urlInfo.organization = splits[0];\n                        urlInfo.full_name = urlInfo.organization + '/_git/' + urlInfo.name;\n                    } else {\n                        urlInfo.owner = splits[0];\n                        urlInfo.full_name = urlInfo.owner + '/_git/' + urlInfo.name;\n                    }\n                } else if (splits.length === 4) {\n                    urlInfo.organization = splits[0];\n                    urlInfo.owner = splits[1];\n                    urlInfo.name = splits[3];\n                    urlInfo.full_name = urlInfo.organization + '/' + urlInfo.owner + '/_git/' + urlInfo.name;\n                }\n                if (urlInfo.query && urlInfo.query['path']) {\n                    urlInfo.filepath = urlInfo.query['path'].replace(/^\\/+/g, ''); // Strip leading slash (/)\n                }\n                if (urlInfo.query && urlInfo.query['version']) {\n                    // version=GB<branch>\n                    urlInfo.ref = urlInfo.query['version'].replace(/^GB/, ''); // remove GB\n                }\n                break;\n            }\n        default:\n            splits = urlInfo.name.split(\"/\");\n            var nameIndex = splits.length - 1;\n            if (splits.length >= 2) {\n                var dashIndex = splits.indexOf(\"-\", 2);\n                var blobIndex = splits.indexOf(\"blob\", 2);\n                var treeIndex = splits.indexOf(\"tree\", 2);\n                var commitIndex = splits.indexOf(\"commit\", 2);\n                var srcIndex = splits.indexOf(\"src\", 2);\n                var rawIndex = splits.indexOf(\"raw\", 2);\n                var editIndex = splits.indexOf(\"edit\", 2);\n                nameIndex = dashIndex > 0 ? dashIndex - 1 : blobIndex > 0 ? blobIndex - 1 : treeIndex > 0 ? treeIndex - 1 : commitIndex > 0 ? commitIndex - 1 : srcIndex > 0 ? srcIndex - 1 : rawIndex > 0 ? rawIndex - 1 : editIndex > 0 ? editIndex - 1 : nameIndex;\n\n                urlInfo.owner = splits.slice(0, nameIndex).join('/');\n                urlInfo.name = splits[nameIndex];\n                if (commitIndex) {\n                    urlInfo.commit = splits[nameIndex + 2];\n                }\n            }\n\n            urlInfo.ref = \"\";\n            urlInfo.filepathtype = \"\";\n            urlInfo.filepath = \"\";\n            var offsetNameIndex = splits.length > nameIndex && splits[nameIndex + 1] === \"-\" ? nameIndex + 1 : nameIndex;\n\n            if (splits.length > offsetNameIndex + 2 && [\"raw\", \"src\", \"blob\", \"tree\", \"edit\"].indexOf(splits[offsetNameIndex + 1]) >= 0) {\n                urlInfo.filepathtype = splits[offsetNameIndex + 1];\n                urlInfo.ref = splits[offsetNameIndex + 2];\n                if (splits.length > offsetNameIndex + 3) {\n                    urlInfo.filepath = splits.slice(offsetNameIndex + 3).join('/');\n                }\n            }\n            urlInfo.organization = urlInfo.owner;\n            break;\n    }\n\n    if (!urlInfo.full_name) {\n        urlInfo.full_name = urlInfo.owner;\n        if (urlInfo.name) {\n            urlInfo.full_name && (urlInfo.full_name += \"/\");\n            urlInfo.full_name += urlInfo.name;\n        }\n    }\n    // Bitbucket Server\n    if (urlInfo.owner.startsWith(\"scm/\")) {\n        urlInfo.source = \"bitbucket-server\";\n        urlInfo.owner = urlInfo.owner.replace(\"scm/\", \"\");\n        urlInfo.organization = urlInfo.owner;\n        urlInfo.full_name = urlInfo.owner + \"/\" + urlInfo.name;\n    }\n\n    var bitbucket = /(projects|users)\\/(.*?)\\/repos\\/(.*?)((\\/.*$)|$)/;\n    var matches = bitbucket.exec(urlInfo.pathname);\n    if (matches != null) {\n        urlInfo.source = \"bitbucket-server\";\n        if (matches[1] === \"users\") {\n            urlInfo.owner = \"~\" + matches[2];\n        } else {\n            urlInfo.owner = matches[2];\n        }\n\n        urlInfo.organization = urlInfo.owner;\n        urlInfo.name = matches[3];\n\n        splits = matches[4].split(\"/\");\n        if (splits.length > 1) {\n            if ([\"raw\", \"browse\"].indexOf(splits[1]) >= 0) {\n                urlInfo.filepathtype = splits[1];\n                if (splits.length > 2) {\n                    urlInfo.filepath = splits.slice(2).join('/');\n                }\n            } else if (splits[1] === \"commits\" && splits.length > 2) {\n                urlInfo.commit = splits[2];\n            }\n        }\n        urlInfo.full_name = urlInfo.owner + \"/\" + urlInfo.name;\n\n        if (urlInfo.query.at) {\n            urlInfo.ref = urlInfo.query.at;\n        } else {\n            urlInfo.ref = \"\";\n        }\n    }\n    return urlInfo;\n}\n\n/**\n * stringify\n * Stringifies a `GitUrl` object.\n *\n * @name stringify\n * @function\n * @param {GitUrl} obj The parsed Git url object.\n * @param {String} type The type of the stringified url (default `obj.protocol`).\n * @return {String} The stringified url.\n */\ngitUrlParse.stringify = function (obj, type) {\n    type = type || (obj.protocols && obj.protocols.length ? obj.protocols.join('+') : obj.protocol);\n    var port = obj.port ? \":\" + obj.port : '';\n    var user = obj.user || 'git';\n    var maybeGitSuffix = obj.git_suffix ? \".git\" : \"\";\n    switch (type) {\n        case \"ssh\":\n            if (port) return \"ssh://\" + user + \"@\" + obj.resource + port + \"/\" + obj.full_name + maybeGitSuffix;else return user + \"@\" + obj.resource + \":\" + obj.full_name + maybeGitSuffix;\n        case \"git+ssh\":\n        case \"ssh+git\":\n        case \"ftp\":\n        case \"ftps\":\n            return type + \"://\" + user + \"@\" + obj.resource + port + \"/\" + obj.full_name + maybeGitSuffix;\n        case \"http\":\n        case \"https\":\n            var auth = obj.token ? buildToken(obj) : obj.user && (obj.protocols.includes('http') || obj.protocols.includes('https')) ? obj.user + \"@\" : \"\";\n            return type + \"://\" + auth + obj.resource + port + \"/\" + buildPath(obj) + maybeGitSuffix;\n        default:\n            return obj.href;\n    }\n};\n\n/*!\n * buildToken\n * Builds OAuth token prefix (helper function)\n *\n * @name buildToken\n * @function\n * @param {GitUrl} obj The parsed Git url object.\n * @return {String} token prefix\n */\nfunction buildToken(obj) {\n    switch (obj.source) {\n        case \"bitbucket.org\":\n            return \"x-token-auth:\" + obj.token + \"@\";\n        default:\n            return obj.token + \"@\";\n    }\n}\n\nfunction buildPath(obj) {\n    switch (obj.source) {\n        case \"bitbucket-server\":\n            return \"scm/\" + obj.full_name;\n        default:\n            return \"\" + obj.full_name;\n\n    }\n}\n\nmodule.exports = gitUrlParse;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLnlhcm4vY2FjaGUvZ2l0LXVybC1wYXJzZS1ucG0tMTMuMS4xLTAwNmY2MzhkN2QtOGE2MTExODE0Zi56aXAvbm9kZV9tb2R1bGVzL2dpdC11cmwtcGFyc2UvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyw2R0FBUTs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGtDQUFrQyxLQUFLLFlBQVksTUFBTTs7QUFFekQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUZBQW1GO0FBQ25GO0FBQ0E7QUFDQTtBQUNBLCtFQUErRTtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdIQUFnSDtBQUNoSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BzYmphbmcvZG9jcy8uLi8uLi8ueWFybi9jYWNoZS9naXQtdXJsLXBhcnNlLW5wbS0xMy4xLjEtMDA2ZjYzOGQ3ZC04YTYxMTE4MTRmLnppcC9ub2RlX21vZHVsZXMvZ2l0LXVybC1wYXJzZS9saWIvaW5kZXguanM/MzMxOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIGdpdFVwID0gcmVxdWlyZShcImdpdC11cFwiKTtcblxuLyoqXG4gKiBnaXRVcmxQYXJzZVxuICogUGFyc2VzIGEgR2l0IHVybC5cbiAqXG4gKiBAbmFtZSBnaXRVcmxQYXJzZVxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBHaXQgdXJsIHRvIHBhcnNlLlxuICogQHJldHVybiB7R2l0VXJsfSBUaGUgYEdpdFVybGAgb2JqZWN0IGNvbnRhaW5pbmc6XG4gKlxuICogIC0gYHByb3RvY29sc2AgKEFycmF5KTogQW4gYXJyYXkgd2l0aCB0aGUgdXJsIHByb3RvY29scyAodXN1YWxseSBpdCBoYXMgb25lIGVsZW1lbnQpLlxuICogIC0gYHBvcnRgIChudWxsfE51bWJlcik6IFRoZSBkb21haW4gcG9ydC5cbiAqICAtIGByZXNvdXJjZWAgKFN0cmluZyk6IFRoZSB1cmwgZG9tYWluIChpbmNsdWRpbmcgc3ViZG9tYWlucykuXG4gKiAgLSBgdXNlcmAgKFN0cmluZyk6IFRoZSBhdXRoZW50aWNhdGlvbiB1c2VyICh1c3VhbGx5IGZvciBzc2ggdXJscykuXG4gKiAgLSBgcGF0aG5hbWVgIChTdHJpbmcpOiBUaGUgdXJsIHBhdGhuYW1lLlxuICogIC0gYGhhc2hgIChTdHJpbmcpOiBUaGUgdXJsIGhhc2guXG4gKiAgLSBgc2VhcmNoYCAoU3RyaW5nKTogVGhlIHVybCBxdWVyeXN0cmluZyB2YWx1ZS5cbiAqICAtIGBocmVmYCAoU3RyaW5nKTogVGhlIGlucHV0IHVybC5cbiAqICAtIGBwcm90b2NvbGAgKFN0cmluZyk6IFRoZSBnaXQgdXJsIHByb3RvY29sLlxuICogIC0gYHRva2VuYCAoU3RyaW5nKTogVGhlIG9hdXRoIHRva2VuIChjb3VsZCBhcHBlYXIgaW4gdGhlIGh0dHBzIHVybHMpLlxuICogIC0gYHNvdXJjZWAgKFN0cmluZyk6IFRoZSBHaXQgcHJvdmlkZXIgKGUuZy4gYFwiZ2l0aHViLmNvbVwiYCkuXG4gKiAgLSBgb3duZXJgIChTdHJpbmcpOiBUaGUgcmVwb3NpdG9yeSBvd25lci5cbiAqICAtIGBuYW1lYCAoU3RyaW5nKTogVGhlIHJlcG9zaXRvcnkgbmFtZS5cbiAqICAtIGByZWZgIChTdHJpbmcpOiBUaGUgcmVwb3NpdG9yeSByZWYgKGUuZy4sIFwibWFzdGVyXCIgb3IgXCJkZXZcIikuXG4gKiAgLSBgZmlsZXBhdGhgIChTdHJpbmcpOiBBIGZpbGVwYXRoIHJlbGF0aXZlIHRvIHRoZSByZXBvc2l0b3J5IHJvb3QuXG4gKiAgLSBgZmlsZXBhdGh0eXBlYCAoU3RyaW5nKTogVGhlIHR5cGUgb2YgZmlsZXBhdGggaW4gdGhlIHVybCAoXCJibG9iXCIgb3IgXCJ0cmVlXCIpLlxuICogIC0gYGZ1bGxfbmFtZWAgKFN0cmluZyk6IFRoZSBvd25lciBhbmQgbmFtZSB2YWx1ZXMgaW4gdGhlIGBvd25lci9uYW1lYCBmb3JtYXQuXG4gKiAgLSBgdG9TdHJpbmdgIChGdW5jdGlvbik6IEEgZnVuY3Rpb24gdG8gc3RyaW5naWZ5IHRoZSBwYXJzZWQgdXJsIGludG8gYW5vdGhlciB1cmwgdHlwZS5cbiAqICAtIGBvcmdhbml6YXRpb25gIChTdHJpbmcpOiBUaGUgb3JnYW5pemF0aW9uIHRoZSBvd25lciBiZWxvbmdzIHRvLiBUaGlzIGlzIENsb3VkRm9yZ2Ugc3BlY2lmaWMuXG4gKiAgLSBgZ2l0X3N1ZmZpeGAgKEJvb2xlYW4pOiBXaGV0aGVyIHRvIGFkZCB0aGUgYC5naXRgIHN1ZmZpeCBvciBub3QuXG4gKlxuICovXG5mdW5jdGlvbiBnaXRVcmxQYXJzZSh1cmwpIHtcblxuICAgIGlmICh0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSB1cmwgbXVzdCBiZSBhIHN0cmluZy5cIik7XG4gICAgfVxuXG4gICAgdmFyIHNob3J0aGFuZFJlID0gL14oW2EtelxcZC1dezEsMzl9KVxcLyhbLVxcLlxcd117MSwxMDB9KSQvaTtcblxuICAgIGlmIChzaG9ydGhhbmRSZS50ZXN0KHVybCkpIHtcbiAgICAgICAgdXJsID0gXCJodHRwczovL2dpdGh1Yi5jb20vXCIgKyB1cmw7XG4gICAgfVxuXG4gICAgdmFyIHVybEluZm8gPSBnaXRVcCh1cmwpLFxuICAgICAgICBzb3VyY2VQYXJ0cyA9IHVybEluZm8ucmVzb3VyY2Uuc3BsaXQoXCIuXCIpLFxuICAgICAgICBzcGxpdHMgPSBudWxsO1xuXG4gICAgdXJsSW5mby50b1N0cmluZyA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIHJldHVybiBnaXRVcmxQYXJzZS5zdHJpbmdpZnkodGhpcywgdHlwZSk7XG4gICAgfTtcblxuICAgIHVybEluZm8uc291cmNlID0gc291cmNlUGFydHMubGVuZ3RoID4gMiA/IHNvdXJjZVBhcnRzLnNsaWNlKDEgLSBzb3VyY2VQYXJ0cy5sZW5ndGgpLmpvaW4oXCIuXCIpIDogdXJsSW5mby5zb3VyY2UgPSB1cmxJbmZvLnJlc291cmNlO1xuXG4gICAgLy8gTm90ZTogU29tZSBob3N0aW5nIHNlcnZpY2VzIChlLmcuIFZpc3VhbCBTdHVkaW8gVGVhbSBTZXJ2aWNlcykgYWxsb3cgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG4gICAgLy8gaW4gdGhlIHJlcG9zaXRvcnkgYW5kIG93bmVyIG5hbWVzIHNvIHdlIGRlY29kZSB0aGUgVVJMIHBpZWNlcyB0byBnZXQgdGhlIGNvcnJlY3QgcmVzdWx0XG4gICAgdXJsSW5mby5naXRfc3VmZml4ID0gL1xcLmdpdCQvLnRlc3QodXJsSW5mby5wYXRobmFtZSk7XG4gICAgdXJsSW5mby5uYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KCh1cmxJbmZvLnBhdGhuYW1lIHx8IHVybEluZm8uaHJlZikucmVwbGFjZSgvKF5cXC8pfChcXC8kKS9nLCAnJykucmVwbGFjZSgvXFwuZ2l0JC8sIFwiXCIpKTtcbiAgICB1cmxJbmZvLm93bmVyID0gZGVjb2RlVVJJQ29tcG9uZW50KHVybEluZm8udXNlcik7XG5cbiAgICBzd2l0Y2ggKHVybEluZm8uc291cmNlKSB7XG4gICAgICAgIGNhc2UgXCJnaXQuY2xvdWRmb3JnZS5jb21cIjpcbiAgICAgICAgICAgIHVybEluZm8ub3duZXIgPSB1cmxJbmZvLnVzZXI7XG4gICAgICAgICAgICB1cmxJbmZvLm9yZ2FuaXphdGlvbiA9IHNvdXJjZVBhcnRzWzBdO1xuICAgICAgICAgICAgdXJsSW5mby5zb3VyY2UgPSBcImNsb3VkZm9yZ2UuY29tXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInZpc3VhbHN0dWRpby5jb21cIjpcbiAgICAgICAgICAgIC8vIEhhbmRsZSBWU1RTIFNTSCBVUkxzXG4gICAgICAgICAgICBpZiAodXJsSW5mby5yZXNvdXJjZSA9PT0gJ3ZzLXNzaC52aXN1YWxzdHVkaW8uY29tJykge1xuICAgICAgICAgICAgICAgIHNwbGl0cyA9IHVybEluZm8ubmFtZS5zcGxpdChcIi9cIik7XG4gICAgICAgICAgICAgICAgaWYgKHNwbGl0cy5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsSW5mby5vcmdhbml6YXRpb24gPSBzcGxpdHNbMV07XG4gICAgICAgICAgICAgICAgICAgIHVybEluZm8ub3duZXIgPSBzcGxpdHNbMl07XG4gICAgICAgICAgICAgICAgICAgIHVybEluZm8ubmFtZSA9IHNwbGl0c1szXTtcbiAgICAgICAgICAgICAgICAgICAgdXJsSW5mby5mdWxsX25hbWUgPSBzcGxpdHNbMl0gKyAnLycgKyBzcGxpdHNbM107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzcGxpdHMgPSB1cmxJbmZvLm5hbWUuc3BsaXQoXCIvXCIpO1xuICAgICAgICAgICAgICAgIGlmIChzcGxpdHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHVybEluZm8ub3duZXIgPSBzcGxpdHNbMV07XG4gICAgICAgICAgICAgICAgICAgIHVybEluZm8ubmFtZSA9IHNwbGl0c1sxXTtcbiAgICAgICAgICAgICAgICAgICAgdXJsSW5mby5mdWxsX25hbWUgPSAnX2dpdC8nICsgdXJsSW5mby5uYW1lO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3BsaXRzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgICAgICAgICB1cmxJbmZvLm5hbWUgPSBzcGxpdHNbMl07XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcGxpdHNbMF0gPT09ICdEZWZhdWx0Q29sbGVjdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybEluZm8ub3duZXIgPSBzcGxpdHNbMl07XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmxJbmZvLm9yZ2FuaXphdGlvbiA9IHNwbGl0c1swXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybEluZm8uZnVsbF9uYW1lID0gdXJsSW5mby5vcmdhbml6YXRpb24gKyAnL19naXQvJyArIHVybEluZm8ubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybEluZm8ub3duZXIgPSBzcGxpdHNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmxJbmZvLmZ1bGxfbmFtZSA9IHVybEluZm8ub3duZXIgKyAnL19naXQvJyArIHVybEluZm8ubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3BsaXRzLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICB1cmxJbmZvLm9yZ2FuaXphdGlvbiA9IHNwbGl0c1swXTtcbiAgICAgICAgICAgICAgICAgICAgdXJsSW5mby5vd25lciA9IHNwbGl0c1sxXTtcbiAgICAgICAgICAgICAgICAgICAgdXJsSW5mby5uYW1lID0gc3BsaXRzWzNdO1xuICAgICAgICAgICAgICAgICAgICB1cmxJbmZvLmZ1bGxfbmFtZSA9IHVybEluZm8ub3JnYW5pemF0aW9uICsgJy8nICsgdXJsSW5mby5vd25lciArICcvX2dpdC8nICsgdXJsSW5mby5uYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAvLyBBenVyZSBEZXZPcHMgKGZvcm1lcmx5IFZpc3VhbCBTdHVkaW8gVGVhbSBTZXJ2aWNlcylcbiAgICAgICAgY2FzZSBcImRldi5henVyZS5jb21cIjpcbiAgICAgICAgY2FzZSBcImF6dXJlLmNvbVwiOlxuICAgICAgICAgICAgaWYgKHVybEluZm8ucmVzb3VyY2UgPT09ICdzc2guZGV2LmF6dXJlLmNvbScpIHtcbiAgICAgICAgICAgICAgICBzcGxpdHMgPSB1cmxJbmZvLm5hbWUuc3BsaXQoXCIvXCIpO1xuICAgICAgICAgICAgICAgIGlmIChzcGxpdHMubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHVybEluZm8ub3JnYW5pemF0aW9uID0gc3BsaXRzWzFdO1xuICAgICAgICAgICAgICAgICAgICB1cmxJbmZvLm93bmVyID0gc3BsaXRzWzJdO1xuICAgICAgICAgICAgICAgICAgICB1cmxJbmZvLm5hbWUgPSBzcGxpdHNbM107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzcGxpdHMgPSB1cmxJbmZvLm5hbWUuc3BsaXQoXCIvXCIpO1xuICAgICAgICAgICAgICAgIGlmIChzcGxpdHMubGVuZ3RoID09PSA1KSB7XG4gICAgICAgICAgICAgICAgICAgIHVybEluZm8ub3JnYW5pemF0aW9uID0gc3BsaXRzWzBdO1xuICAgICAgICAgICAgICAgICAgICB1cmxJbmZvLm93bmVyID0gc3BsaXRzWzFdO1xuICAgICAgICAgICAgICAgICAgICB1cmxJbmZvLm5hbWUgPSBzcGxpdHNbNF07XG4gICAgICAgICAgICAgICAgICAgIHVybEluZm8uZnVsbF9uYW1lID0gJ19naXQvJyArIHVybEluZm8ubmFtZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNwbGl0cy5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsSW5mby5uYW1lID0gc3BsaXRzWzJdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3BsaXRzWzBdID09PSAnRGVmYXVsdENvbGxlY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmxJbmZvLm93bmVyID0gc3BsaXRzWzJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsSW5mby5vcmdhbml6YXRpb24gPSBzcGxpdHNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmxJbmZvLmZ1bGxfbmFtZSA9IHVybEluZm8ub3JnYW5pemF0aW9uICsgJy9fZ2l0LycgKyB1cmxJbmZvLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmxJbmZvLm93bmVyID0gc3BsaXRzWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsSW5mby5mdWxsX25hbWUgPSB1cmxJbmZvLm93bmVyICsgJy9fZ2l0LycgKyB1cmxJbmZvLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNwbGl0cy5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsSW5mby5vcmdhbml6YXRpb24gPSBzcGxpdHNbMF07XG4gICAgICAgICAgICAgICAgICAgIHVybEluZm8ub3duZXIgPSBzcGxpdHNbMV07XG4gICAgICAgICAgICAgICAgICAgIHVybEluZm8ubmFtZSA9IHNwbGl0c1szXTtcbiAgICAgICAgICAgICAgICAgICAgdXJsSW5mby5mdWxsX25hbWUgPSB1cmxJbmZvLm9yZ2FuaXphdGlvbiArICcvJyArIHVybEluZm8ub3duZXIgKyAnL19naXQvJyArIHVybEluZm8ubmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHVybEluZm8ucXVlcnkgJiYgdXJsSW5mby5xdWVyeVsncGF0aCddKSB7XG4gICAgICAgICAgICAgICAgICAgIHVybEluZm8uZmlsZXBhdGggPSB1cmxJbmZvLnF1ZXJ5WydwYXRoJ10ucmVwbGFjZSgvXlxcLysvZywgJycpOyAvLyBTdHJpcCBsZWFkaW5nIHNsYXNoICgvKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodXJsSW5mby5xdWVyeSAmJiB1cmxJbmZvLnF1ZXJ5Wyd2ZXJzaW9uJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdmVyc2lvbj1HQjxicmFuY2g+XG4gICAgICAgICAgICAgICAgICAgIHVybEluZm8ucmVmID0gdXJsSW5mby5xdWVyeVsndmVyc2lvbiddLnJlcGxhY2UoL15HQi8sICcnKTsgLy8gcmVtb3ZlIEdCXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgc3BsaXRzID0gdXJsSW5mby5uYW1lLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgICAgIHZhciBuYW1lSW5kZXggPSBzcGxpdHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIGlmIChzcGxpdHMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGFzaEluZGV4ID0gc3BsaXRzLmluZGV4T2YoXCItXCIsIDIpO1xuICAgICAgICAgICAgICAgIHZhciBibG9iSW5kZXggPSBzcGxpdHMuaW5kZXhPZihcImJsb2JcIiwgMik7XG4gICAgICAgICAgICAgICAgdmFyIHRyZWVJbmRleCA9IHNwbGl0cy5pbmRleE9mKFwidHJlZVwiLCAyKTtcbiAgICAgICAgICAgICAgICB2YXIgY29tbWl0SW5kZXggPSBzcGxpdHMuaW5kZXhPZihcImNvbW1pdFwiLCAyKTtcbiAgICAgICAgICAgICAgICB2YXIgc3JjSW5kZXggPSBzcGxpdHMuaW5kZXhPZihcInNyY1wiLCAyKTtcbiAgICAgICAgICAgICAgICB2YXIgcmF3SW5kZXggPSBzcGxpdHMuaW5kZXhPZihcInJhd1wiLCAyKTtcbiAgICAgICAgICAgICAgICB2YXIgZWRpdEluZGV4ID0gc3BsaXRzLmluZGV4T2YoXCJlZGl0XCIsIDIpO1xuICAgICAgICAgICAgICAgIG5hbWVJbmRleCA9IGRhc2hJbmRleCA+IDAgPyBkYXNoSW5kZXggLSAxIDogYmxvYkluZGV4ID4gMCA/IGJsb2JJbmRleCAtIDEgOiB0cmVlSW5kZXggPiAwID8gdHJlZUluZGV4IC0gMSA6IGNvbW1pdEluZGV4ID4gMCA/IGNvbW1pdEluZGV4IC0gMSA6IHNyY0luZGV4ID4gMCA/IHNyY0luZGV4IC0gMSA6IHJhd0luZGV4ID4gMCA/IHJhd0luZGV4IC0gMSA6IGVkaXRJbmRleCA+IDAgPyBlZGl0SW5kZXggLSAxIDogbmFtZUluZGV4O1xuXG4gICAgICAgICAgICAgICAgdXJsSW5mby5vd25lciA9IHNwbGl0cy5zbGljZSgwLCBuYW1lSW5kZXgpLmpvaW4oJy8nKTtcbiAgICAgICAgICAgICAgICB1cmxJbmZvLm5hbWUgPSBzcGxpdHNbbmFtZUluZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoY29tbWl0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsSW5mby5jb21taXQgPSBzcGxpdHNbbmFtZUluZGV4ICsgMl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB1cmxJbmZvLnJlZiA9IFwiXCI7XG4gICAgICAgICAgICB1cmxJbmZvLmZpbGVwYXRodHlwZSA9IFwiXCI7XG4gICAgICAgICAgICB1cmxJbmZvLmZpbGVwYXRoID0gXCJcIjtcbiAgICAgICAgICAgIHZhciBvZmZzZXROYW1lSW5kZXggPSBzcGxpdHMubGVuZ3RoID4gbmFtZUluZGV4ICYmIHNwbGl0c1tuYW1lSW5kZXggKyAxXSA9PT0gXCItXCIgPyBuYW1lSW5kZXggKyAxIDogbmFtZUluZGV4O1xuXG4gICAgICAgICAgICBpZiAoc3BsaXRzLmxlbmd0aCA+IG9mZnNldE5hbWVJbmRleCArIDIgJiYgW1wicmF3XCIsIFwic3JjXCIsIFwiYmxvYlwiLCBcInRyZWVcIiwgXCJlZGl0XCJdLmluZGV4T2Yoc3BsaXRzW29mZnNldE5hbWVJbmRleCArIDFdKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgdXJsSW5mby5maWxlcGF0aHR5cGUgPSBzcGxpdHNbb2Zmc2V0TmFtZUluZGV4ICsgMV07XG4gICAgICAgICAgICAgICAgdXJsSW5mby5yZWYgPSBzcGxpdHNbb2Zmc2V0TmFtZUluZGV4ICsgMl07XG4gICAgICAgICAgICAgICAgaWYgKHNwbGl0cy5sZW5ndGggPiBvZmZzZXROYW1lSW5kZXggKyAzKSB7XG4gICAgICAgICAgICAgICAgICAgIHVybEluZm8uZmlsZXBhdGggPSBzcGxpdHMuc2xpY2Uob2Zmc2V0TmFtZUluZGV4ICsgMykuam9pbignLycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVybEluZm8ub3JnYW5pemF0aW9uID0gdXJsSW5mby5vd25lcjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICghdXJsSW5mby5mdWxsX25hbWUpIHtcbiAgICAgICAgdXJsSW5mby5mdWxsX25hbWUgPSB1cmxJbmZvLm93bmVyO1xuICAgICAgICBpZiAodXJsSW5mby5uYW1lKSB7XG4gICAgICAgICAgICB1cmxJbmZvLmZ1bGxfbmFtZSAmJiAodXJsSW5mby5mdWxsX25hbWUgKz0gXCIvXCIpO1xuICAgICAgICAgICAgdXJsSW5mby5mdWxsX25hbWUgKz0gdXJsSW5mby5uYW1lO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEJpdGJ1Y2tldCBTZXJ2ZXJcbiAgICBpZiAodXJsSW5mby5vd25lci5zdGFydHNXaXRoKFwic2NtL1wiKSkge1xuICAgICAgICB1cmxJbmZvLnNvdXJjZSA9IFwiYml0YnVja2V0LXNlcnZlclwiO1xuICAgICAgICB1cmxJbmZvLm93bmVyID0gdXJsSW5mby5vd25lci5yZXBsYWNlKFwic2NtL1wiLCBcIlwiKTtcbiAgICAgICAgdXJsSW5mby5vcmdhbml6YXRpb24gPSB1cmxJbmZvLm93bmVyO1xuICAgICAgICB1cmxJbmZvLmZ1bGxfbmFtZSA9IHVybEluZm8ub3duZXIgKyBcIi9cIiArIHVybEluZm8ubmFtZTtcbiAgICB9XG5cbiAgICB2YXIgYml0YnVja2V0ID0gLyhwcm9qZWN0c3x1c2VycylcXC8oLio/KVxcL3JlcG9zXFwvKC4qPykoKFxcLy4qJCl8JCkvO1xuICAgIHZhciBtYXRjaGVzID0gYml0YnVja2V0LmV4ZWModXJsSW5mby5wYXRobmFtZSk7XG4gICAgaWYgKG1hdGNoZXMgIT0gbnVsbCkge1xuICAgICAgICB1cmxJbmZvLnNvdXJjZSA9IFwiYml0YnVja2V0LXNlcnZlclwiO1xuICAgICAgICBpZiAobWF0Y2hlc1sxXSA9PT0gXCJ1c2Vyc1wiKSB7XG4gICAgICAgICAgICB1cmxJbmZvLm93bmVyID0gXCJ+XCIgKyBtYXRjaGVzWzJdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXJsSW5mby5vd25lciA9IG1hdGNoZXNbMl07XG4gICAgICAgIH1cblxuICAgICAgICB1cmxJbmZvLm9yZ2FuaXphdGlvbiA9IHVybEluZm8ub3duZXI7XG4gICAgICAgIHVybEluZm8ubmFtZSA9IG1hdGNoZXNbM107XG5cbiAgICAgICAgc3BsaXRzID0gbWF0Y2hlc1s0XS5zcGxpdChcIi9cIik7XG4gICAgICAgIGlmIChzcGxpdHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgaWYgKFtcInJhd1wiLCBcImJyb3dzZVwiXS5pbmRleE9mKHNwbGl0c1sxXSkgPj0gMCkge1xuICAgICAgICAgICAgICAgIHVybEluZm8uZmlsZXBhdGh0eXBlID0gc3BsaXRzWzFdO1xuICAgICAgICAgICAgICAgIGlmIChzcGxpdHMubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgICAgICB1cmxJbmZvLmZpbGVwYXRoID0gc3BsaXRzLnNsaWNlKDIpLmpvaW4oJy8nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNwbGl0c1sxXSA9PT0gXCJjb21taXRzXCIgJiYgc3BsaXRzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgICAgICB1cmxJbmZvLmNvbW1pdCA9IHNwbGl0c1syXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB1cmxJbmZvLmZ1bGxfbmFtZSA9IHVybEluZm8ub3duZXIgKyBcIi9cIiArIHVybEluZm8ubmFtZTtcblxuICAgICAgICBpZiAodXJsSW5mby5xdWVyeS5hdCkge1xuICAgICAgICAgICAgdXJsSW5mby5yZWYgPSB1cmxJbmZvLnF1ZXJ5LmF0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXJsSW5mby5yZWYgPSBcIlwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1cmxJbmZvO1xufVxuXG4vKipcbiAqIHN0cmluZ2lmeVxuICogU3RyaW5naWZpZXMgYSBgR2l0VXJsYCBvYmplY3QuXG4gKlxuICogQG5hbWUgc3RyaW5naWZ5XG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7R2l0VXJsfSBvYmogVGhlIHBhcnNlZCBHaXQgdXJsIG9iamVjdC5cbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSB0eXBlIG9mIHRoZSBzdHJpbmdpZmllZCB1cmwgKGRlZmF1bHQgYG9iai5wcm90b2NvbGApLlxuICogQHJldHVybiB7U3RyaW5nfSBUaGUgc3RyaW5naWZpZWQgdXJsLlxuICovXG5naXRVcmxQYXJzZS5zdHJpbmdpZnkgPSBmdW5jdGlvbiAob2JqLCB0eXBlKSB7XG4gICAgdHlwZSA9IHR5cGUgfHwgKG9iai5wcm90b2NvbHMgJiYgb2JqLnByb3RvY29scy5sZW5ndGggPyBvYmoucHJvdG9jb2xzLmpvaW4oJysnKSA6IG9iai5wcm90b2NvbCk7XG4gICAgdmFyIHBvcnQgPSBvYmoucG9ydCA/IFwiOlwiICsgb2JqLnBvcnQgOiAnJztcbiAgICB2YXIgdXNlciA9IG9iai51c2VyIHx8ICdnaXQnO1xuICAgIHZhciBtYXliZUdpdFN1ZmZpeCA9IG9iai5naXRfc3VmZml4ID8gXCIuZ2l0XCIgOiBcIlwiO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwic3NoXCI6XG4gICAgICAgICAgICBpZiAocG9ydCkgcmV0dXJuIFwic3NoOi8vXCIgKyB1c2VyICsgXCJAXCIgKyBvYmoucmVzb3VyY2UgKyBwb3J0ICsgXCIvXCIgKyBvYmouZnVsbF9uYW1lICsgbWF5YmVHaXRTdWZmaXg7ZWxzZSByZXR1cm4gdXNlciArIFwiQFwiICsgb2JqLnJlc291cmNlICsgXCI6XCIgKyBvYmouZnVsbF9uYW1lICsgbWF5YmVHaXRTdWZmaXg7XG4gICAgICAgIGNhc2UgXCJnaXQrc3NoXCI6XG4gICAgICAgIGNhc2UgXCJzc2grZ2l0XCI6XG4gICAgICAgIGNhc2UgXCJmdHBcIjpcbiAgICAgICAgY2FzZSBcImZ0cHNcIjpcbiAgICAgICAgICAgIHJldHVybiB0eXBlICsgXCI6Ly9cIiArIHVzZXIgKyBcIkBcIiArIG9iai5yZXNvdXJjZSArIHBvcnQgKyBcIi9cIiArIG9iai5mdWxsX25hbWUgKyBtYXliZUdpdFN1ZmZpeDtcbiAgICAgICAgY2FzZSBcImh0dHBcIjpcbiAgICAgICAgY2FzZSBcImh0dHBzXCI6XG4gICAgICAgICAgICB2YXIgYXV0aCA9IG9iai50b2tlbiA/IGJ1aWxkVG9rZW4ob2JqKSA6IG9iai51c2VyICYmIChvYmoucHJvdG9jb2xzLmluY2x1ZGVzKCdodHRwJykgfHwgb2JqLnByb3RvY29scy5pbmNsdWRlcygnaHR0cHMnKSkgPyBvYmoudXNlciArIFwiQFwiIDogXCJcIjtcbiAgICAgICAgICAgIHJldHVybiB0eXBlICsgXCI6Ly9cIiArIGF1dGggKyBvYmoucmVzb3VyY2UgKyBwb3J0ICsgXCIvXCIgKyBidWlsZFBhdGgob2JqKSArIG1heWJlR2l0U3VmZml4O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIG9iai5ocmVmO1xuICAgIH1cbn07XG5cbi8qIVxuICogYnVpbGRUb2tlblxuICogQnVpbGRzIE9BdXRoIHRva2VuIHByZWZpeCAoaGVscGVyIGZ1bmN0aW9uKVxuICpcbiAqIEBuYW1lIGJ1aWxkVG9rZW5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtHaXRVcmx9IG9iaiBUaGUgcGFyc2VkIEdpdCB1cmwgb2JqZWN0LlxuICogQHJldHVybiB7U3RyaW5nfSB0b2tlbiBwcmVmaXhcbiAqL1xuZnVuY3Rpb24gYnVpbGRUb2tlbihvYmopIHtcbiAgICBzd2l0Y2ggKG9iai5zb3VyY2UpIHtcbiAgICAgICAgY2FzZSBcImJpdGJ1Y2tldC5vcmdcIjpcbiAgICAgICAgICAgIHJldHVybiBcIngtdG9rZW4tYXV0aDpcIiArIG9iai50b2tlbiArIFwiQFwiO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIG9iai50b2tlbiArIFwiQFwiO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYnVpbGRQYXRoKG9iaikge1xuICAgIHN3aXRjaCAob2JqLnNvdXJjZSkge1xuICAgICAgICBjYXNlIFwiYml0YnVja2V0LXNlcnZlclwiOlxuICAgICAgICAgICAgcmV0dXJuIFwic2NtL1wiICsgb2JqLmZ1bGxfbmFtZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBcIlwiICsgb2JqLmZ1bGxfbmFtZTtcblxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnaXRVcmxQYXJzZTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../.yarn/cache/git-url-parse-npm-13.1.1-006f638d7d-8a6111814f.zip/node_modules/git-url-parse/lib/index.js\n");

/***/ })

};
;